cd - 			=> idzie do poprzedniej lokacji
CTRL-a 			=> idzie na poczatek linii
CTRL-e 			=> idzie na koniec linii
CTRL-k 			=> usuwa wszystko do końca linii 
CTRL-w 			=> usuwa ostatnie slowoo
CTRL-L          =>	Clears the screen
CTRL-D          =>	Exits the current shell
CTRL-H          =>	Works the same as backspace
CTRL-U          =>	Deletes from beginning of line to cursor position

cat > file	Any subsequent lines typed will go into the file, until CTRL-D is typed.
cat >> file	Any subsequent lines are appended to the file, until CTRL-D is typed.


ESC-b 			=> do tylu jedno slow
ESC-f			=> do przodu jedno slowo
!! 			    => powtarza ostatnia komende
!$     			=> bierze ostatni argument z poprzedniej komendy
echo !:0 		=> bierze pierwszy argument z poprzedniej komendy
!echo 			=> wyszuka ostatnio użyta komende echo

!?cat           => wraca do ostatniego uzytego polecenia co ma cat np cat /etc/shells
tac             => odwrotnosc cat - wyswietla linie od tylu
cut -d          => wyswietla odpowiednie kolumny, gdzie d to delimeter
cut -f2,4 -d"," etc/passwds => wyswietla 2 i 3 kolumne gdzie odstepem jest ","
zcat, zless, zdiff, and zgrep  => working with compressed files

popd??
pushd??

*********************** To REMEMBER ***************************
sed                                  => Stream EDitor
sed s/pattern/replace_string/g file1 > file2
sed 1,2s/is/are/g testfile           => zamienia is na are w 1,2 liniach
sed s/is/are/g testfile              => zamienia is na are globally

tr '{}' '()' < inputfile > outputfile=>	Translate braces into parenthesis
 echo "This   is   for    testing" | tr -s [:space:]  => Squeeze repetition of characters using -s
 tr -cd [:print:] < file.txt	     => Remove all non-printable character from a file
 cat cities | tr a-z A-Z             => fram small to Capital 

tee                                  => takes the output from any command, and, while sending it to standard output, it also saves it to a file

awk '{ print $0 }' /etc/passwd	     => Print entire file
awk -F: '{ print $1 }' /etc/passwd	 => Print first field (column) of every line, separated by a space

sort -k 3 <filename>	             => Sort the lines by the 3rd field on each line instead of the beginning

grep -v [pattern] <filename>	     => Print all lines that do not match the pattern
grep -C 3 [pattern] <filename>	     => Print context of lines (specified number of lines above and below the pattern) for matching the pattern. Here, the number of lines is specified as 3.
ls -l | cut -d" " -f3                => to display the third column delimited by a blank space, at the command prompt type 

paste                                => can be used to combine fields (such as name or phone number) from different files
split                                => is used to break up (or split) a file into equal-sized segments. For seeing LARGE files
split american-english dictionary    => powstanie wiele plikow dictionary* (np dictionaryaa, disctionaryab)
cat > test1
teraz mozna pisac 
CTRL + D escepe from wrting to the file test1

Command params:
$*	All parameters
$#	Number of arguments
$0	Script name

Command in command:
By enclosing the inner command with backticks (`) i.e.  cd `echo /tmp`
By enclosing the inner command in $( ) cd $(echo /tmp)

 env, set, printenv - list of environment variables.

 Variables created in script must be exported to be global variables (export VAR=value)

[[ -d $NEW_DIR ]] && echo $NEW_DIR already exists => checks if direcotry exists

Check if file exists:
if [ -f /etc/passwd ]
then
    echo "/etc/passwd exists."
fi

-g file	Checks if the file has sgid set.
-u file	Checks if the file has suid set. ???

Alternatives:
expr 8 + 8
echo $(expr 8 + 8)
echo $((x+1))

myLen1=${#string1}	=> Saves the length of string1 in the variable myLen1
${string#*.} => To extract all characters in a string after a dot (.)
************************USEFULL COMMANDS*************************
docker stop $(docker ps | awk '{ print $1 }' | grep -v "CONTAINER")     => stops all containers
cat file1 || cat file2 || cat file3 => In this case, you proceed until something succeeds and then you stop executing any further steps.
make ; make install ; make clean    => he following example will all execute, even if the ones preceding them fail:




***************GIT****************************
If you want to revert changes made to your working copy, do this:

git checkout .
If you want to revert changes made to the index (i.e., that you have added), do this. Warning this will reset all of your unpushed commits to master!:

git reset
If you want to revert a change that you have committed, do this:

git revert <commit 1> <commit 2>
If you want to remove untracked files (e.g., new files, generated files):

git clean -f
Or untracked directories (e.g., new or automatically generated directories):

git clean -fd

