*********************************************Unmemorized****************************************************************
delay 180 repetition 35/s
J               -> joins the line below into current one
0               -> goes to the start of the line, COMMAND 
^               -> goes to the start of the line, COMMAND 
$               -> goes to the end of the line, COMMAND 
0               -> goes to the start of the line, INSERT 
shift I         -> goes to the start of the line, INSERT 
shift A         -> goes to the end of the line, INSERT 
()              -> move to sentence 

#LAST CHANGES
'.              -> go to last change 
Ctrl-R          ->  Redo (reverts UNDO)

#DELETING 
D  or (d$)      -> delete from the cursor to the end of the line
X               -> deletes the previous character (in a direction of the start of the line)

#CHANGE AND REPLACE
cc              -> changing the whole line, INSERT 
dd              -> deleting the whole line, COMMAND

#SCROLLING
H               -> go to top (high) 
M               -> go to medium (medium) 
L               -> move to bottom (low) 
ctrl u          -> polowa screenu w gore 
ctrl d          -> polowa screenu w dol

#WORD TRAVERSING
w               -> next word (first letter of the word)
b               -> prew word (first letter of the word)
e               -> next end of the word 
gm              -> go to the medium of the line 

#COPY AND PASTE
P               -> wkleja przed 
4p              -> paste sth 4 times
"0p             -> copy the thing which is under "0 in register
:registers      -> pokazuje schowek 

# OPENING-CLOSING FILES
:e nazwapliku   -> otwiera nowy plik np ':e ../innyplik'
:split filename -> split window and load another file
:vsplit file    -> vertical split
:sview file     -> same as split, but readonly

ctrl-w up arrow -> move cursor up a window
ctrl-w ctrl-w   -> move cursor to another window (cycle)
ctrl-w_         -> maximize current window
ctrl-w=         -> make all equal size

:hide           -> close current windo
:only           -> keep only this window open
:bd             -> zamyka dany buffer 
:ls             -> show current buffers
:buffer         -> it can be :b 4 -> it open buffers number 4
:bnext          -> goes to next buffer
:bprev          -> goes to prev buffer (previously opened file)
:sh             -> goes to shell, exit goes back to VIM

#FINDING
Fy              -> idz do poprzedniej litery 'y' 
dty             -> delete till 'y', COMMAND
*               -> bedac na slowie szuka nastepnego wystapienia 
#               -> bedac na slowie szuka poprzedniego wystapienia 
:/someWord      -> find a line with that aword, cursor at the start
?pattern        -> Search backward for pattern
CTRL + L        -> clears highlighted words after searching: alternatives  nnoremap <esc> :noh<return><esc>

#REPLACING
:%/search/replace/gc        -> search and replace -> g all occerences c ask confirmation
R               -> wchodzi w tryb edycji 
c               -> usuwa zaznaczony tekst, INSERT

#MARKERS
ma              -> zaznacza punkt 
'a              -> jump to marked line 
`a              -> skacze dokladnie do tego punktu 
mA              -> zaznacza punkt w innym pliku (umozliwia przechodzenie miedzy plikami)
''              -> przeskakuje do poprzedniego markera
 
#TABS
<<              -> insert tabs in normal mode, COMMAND
>>              -> insert tabs in normal mode, COMMAND
ctrl d          -> taby w Insert mode 
ctrl t          -> taby w Insert mode 

#CLOSING AND OPENING METHODS
zo               -> z open  -> otwiera zawijany tekst 
zc               -> z close -> zamyka sekcje (Zawija) 
zM               -> zamyka wszystko 
zR               -> otwiera wszystko 

*********************************************Plugins****************************************************************
#tcomment_vim  
gcc or g>c       -> comments the current line
gc4 UP or DOWN   -> comments 4 lines u gory lub na dokladnie
gc UP or DOWN    -> comments the current and one above or below
gc8j             -> toggle comment for next 8 line 

g<c              -> Uncomment the current line
g<b              -> Uncomment the current region as block

g>c              -> Comment the current line
g>b              -> Comment the current region as block

#vim-surround
cs"'             -> "Hello world!" to  'Hello world!'
cs'<q>           -> to <q>Hello world!</q>
cst"             -> <q>Hello world!</q> to get  "Hello world!"
ds"              -> To remove the delimiters entirely, press Hello world!
ysiw]            -> (iw is a text object) -> [Hello] world!
cs]              -> { [ Hello] world! -> { Hello } world!
yssb or yss      -> Now wrap the entire line in parentheses ({ Hello } world!) 
ysiw<em>         -> makes <em>Hello</em> world!

#nerdtree
Type :help NERDTreeMappings to read through all of the default keyboard shortcuts. These are the ones I use the most frequently:

ctrl + e        -> open or close the nerd tree
t               -> Open the selected file in a new tab
i               -> Open the selected file in a horizontal split window
s               -> Open the selected file in a vertical split window
I               -> Toggle hidden files when beeing in the TREE
m               -> Show the NERD Tree menu - you can add a file for example
R               -> Refresh the tree, useful if files change outside of Vim
?               -> Toggle NERD Tree's quick help
:qa             ->zamyka wszystkie okna i wychodzi
:wqa            ->zamyka i zapisuje wszystkie okna 

it makes a tree of files for us to see
https://www.youtube.com/watch?v=CPu9mDpSYj0
https://medium.com/usevim/nerd-tree-guide-bb22c803dcd2

#ack.vim
?    a quick summary of these keys, repeat to close
o    to open (same as Enter)
O    to open and close the quickfix window
go   to preview file, open but maintain focus on ack.vim results
t    to open in new tab
T    to open in new tab without moving to it
h    to open in horizontal split
H    to open in horizontal split, keeping focus on the results
v    to open in vertical split
gv   to open in vertical split, keeping focus on the results
q    to close the quickfix window


it makes search for code use in the codebase
https://beyondgrep.com/documentation/
you have to do apt-get install ack-grep

#VIM-go
:GoRun              => builds the file
:GoRun % OR ,r      => builds the whole package
:GoBuild OR ,b      => builds the file, shows the errors

:GoTestFunc         => testuje tylko funkcje pod kursorem
:GoTest OR ,t           => odpala wszystkie testy
:GoTestCompile      => testy musza tez sie skompilowac poprawnie
:GoCoverageToggle OR ,c  => shows the coverage
:GoImports OR ,i    => automatically adds imports
:GoDef OR gd        => go to definition
CTRL + O            => goes back after checking the declaration
:GoDefPop OR CTRL T => goes back after checking the definition (do no remember other moves)
:GoDecls            => shows function in file
:GoDevlsDir         => shows functions in directory
:GoDoc OR K         => pokazuje dokumentacje funkcji


:cnext OR ctrl + n  => go to error next prev
:cprev OR ctrl + m  => go to error prev
,a                  => closes the error window
dif                 => deletes everything in function
vaf                 => visual mode whole function
]]                  => jump to next function
[[                  => jump to previous function
d]]                 => delete everything to next function
:A                  => otwiera plik alternatywny (testowy)
:AV                 => otwiera plik alternatywny - vertykalnie
:AS                 => otwiera plik alternatywny horyzontalnie
:AT                 => otwiera plik w nowym tabie

Unused:
:GoImport s         => adding library, has autocomplition
:GoImportAs str strings => add strings as str import 
:GoDrop strings     => deletes the strings import
:GoDeps             => pokazuje zaleznosci
:GoFiles            => pokazuje pliki w pakiecie (bez testow)


#splitjoin.vim
A vim plugin that simplifies the transition between multiline and single-line code 
gS                  => one line structures converts to multiline
gJ                  => many line structures converts to single line

#ctrlp.vim
pozwala na wyszukiwanie plików za pomoca ctrl + p -> wiecej na https://www.youtube.com/watch?v=8XGueeQJsrA
https://github.com/kien/ctrlp.vim -> skroty

#ultisnips
-it must support python in vim
errp + tab
fn -> fmt.Println()
ff -> fmt.Printf()
ln -> log.Println()
lf -> log.Printf()
Message string .<- json + tab 

#vim-buftabline
displays vim buffers as tabs
ctrl + RIGHT        => goes to next tab
ctrl + LEFT         => goes to prev tab

#vim-airline  
dodaj ten pasek informacyjny na dole 

#gruvbox
https://github.com/morhetz/gruvbox/wiki/Configuration - do zmiany konfiguracji
https://github.com/morhetz/gruvbox/issues/85

//TODO
git plugin
Debuging
:GoReferrers skrot
usuniecie swapow - alias
alias for hide 
alias for only
go to previous change 
intelli sense
wylaczyc opoznienie klawiszy - linux
jak wylaczyc podswietlenie od wyszukiwania
zamykanie buffera vim :bd - moze alias na to?
czemu zc i ZM nie dziala?
zmienic przeskakiwanie miedzy oknami na ctrl alt >
zmapowac procent?
https://dev.to/jovica/the-vim-trick-which-will-save-your-time-and-nerves-45pg

makegreen -d do opalania testów (chyba w ruby) i pathogen 
https://realpython.com/vim-and-python-a-match-made-in-heaven/
https://www.youtube.com/watch?v=knSFZCKMy20

export PATH=$PATH:$HOME/go/bin 
https://github.com/fatih/vim-go/issues/1807

*********************************************Memorized****************************************************************
6l               -> forward 6 letters 
2j               -> down 2 lines 
12G              -> go to 12 line 
gg               -> top of the file 
G                -> end of the file 
3w               -> forward 3 words 
x                -> usuwa dany letter 
fN               -> go to next occurence of 'N' 
3fN              -> go to third 'N' 
ci{              -> change in brackets 
/someWord        -> find a word and go to it 
cw               -> change one word starting from the cursur
caw              -> change the whole word
3cw              -> change 3 words 
rM               -> change letter the current letter to letter M 
gJ               -> laczy linie pod spodem z obecna 
.                -> powtarza ostatnia akcje 
r                -> zmienia tylko raz 
CTRL [           -> alternatywa dla ESC
d                -> usun zaznaczony tekst 
d2w              -> usuwa dwa slowa 
:w!              -> overwrite without confirmation 
u                -> undo 

i                -> insert text before cursor, INSERT 
I                -> move to first non blank character of line, INSERT 
a                -> append text after cursor, INSERT
A                -> move to the end of line, INSERT
o                -> insert blank line, INSERT mode 
O                -> insert line above, INSERT mode 

{}               -> move to paragraph 
%                -> move between matching brackets 


#Find and Replace 
n               -> next occurrence 
N               -> prev occurrence 
V               -> uruchamia zaznaczanie wszystkich linii 
v               -> zaznacza od tego kursora 

#Copy and Paste
yy              -> copy a line 
p               -> paste text below cursor 

# HTML
vit             -> zaznaczasz wszystko (i) w tagu (htmlowym) 
vat             -> zaznaczasz wszystko (i) w tagu wraz z tagami (htmlowym) 
ci}             -> change In Brackets 


*********************************************OTHERS****************************************************************
#GOLANG
vim editor 
https://github.com/fatih/vim-go 
https://github.com/fatih/vim-go-tutorial#quick-setup 

#MAC
seil na macu zmiana CAPS na ESC 
karabiner               -> zmienić Delay until repeat 400 i na key Repeat na 25 
vim cheat sheet -sciagnac 
 
# VIM LEARNING MATERIALS
vimcasts.org               -> by zobaczyc jak inni uzywaja vima 
upcase.com/vim 
https://www.youtube.com/user/nettutsplus/search?query=vim


#Vim version problem with vim-go and with python support 
https://gist.github.com/oPauloChaves/440a8725e3fa52f008ee7e707c9e43ec

but the paramas were changed to :

./configure \
--enable-multibyte \
--enable-pythoninterp=dynamic \
--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu \
--enable-python3interp \
--with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu \
--enable-cscope \
--enable-gui=auto \
--with-features=huge \
--with-x \
--enable-fontset \
--enable-largefile \
--disable-netbeans \
--with-compiledby="opaulochaves" \
--enable-fail-if-missing

Alternatives approaches (did not work for me)
https://www.vim.org/git.php (following instruction)
https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source
https://gist.github.com/marciomazza/bb78a84232a6b44b4d45
-had to change to vim.gnome and make alias for it
https://unix.stackexchange.com/questions/217179/python-feature-disabled-vim-nox
https://vi.stackexchange.com/questions/13151/how-to-safely-switch-from-vim-athena-to-vim-gtk
